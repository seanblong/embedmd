# This file contains all available configuration options
# with their default values (in comments).
#
# This file is not a configuration example,
# it contains the exhaustive configuration with explanations of the options.

linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - unused
    - cyclop
    - dupl
    - gofmt
    - misspell

  # Enable presets.
  # https://golangci-lint.run/usage/linters
  # Default: []
  presets:
    - bugs
    - comment
    - complexity
    - error
    - format
    - import
    - metalinter
    - module
    - performance
    - sql
    - style
    - test
    - unused

linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    # max-complexity: 10
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    # package-average: 0.5
    # Should ignore tests.
    skip-tests: true

  errcheck:
    # List of functions to exclude from checking, where each entry is a single function to exclude.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)

  gocritic:
    # Disable all checks.
    # Default: false
    disable-all: true
    # Which checks should be enabled in addition to default checks; can't be combined with 'disabled-checks'.
    # By default, list of stable checks is used (https://go-critic.com/overview#checks-overview):
    #   appendAssign, argOrder, assignOp, badCall, badCond, captLocal, caseOrder, codegenComment, commentFormatting,
    #   defaultCaseOrder, deprecatedComment, dupArg, dupBranchBody, dupCase, dupSubExpr, elseif, exitAfterDefer,
    #   flagDeref, flagName, ifElseChain, mapKey, newDeref, offBy1, regexpMust, singleCaseSwitch, sloppyLen,
    #   sloppyTypeAssert, switchTrue, typeSwitchVar, underef, unlambda, unslice, valSwap, wrapperFunc
    # To see which checks are enabled run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic`.
    enabled-checks:
      # Detects suspicious append result assignments.
      # https://go-critic.com/overview.html#appendassign
      - appendAssign
      # Detects `append` chains to the same slice that can be done in a single `append` call.
      # https://go-critic.com/overview.html#appendcombine
      - appendCombine
      # Detects suspicious arguments order.
      # https://go-critic.com/overview.html#argorder
      - argOrder
      # Detects assignments that can be simplified by using assignment operators.
      # https://go-critic.com/overview.html#assignop
      - assignOp
      # Detects suspicious function calls.
      # https://go-critic.com/overview.html#badcall
      - badCall
      # Detects suspicious condition expressions.
      # https://go-critic.com/overview.html#badcond
      - badCond
      # Detects suspicious mutex lock/unlock operations.
      # https://go-critic.com/overview.html#badlock
      - badLock
      # Detects suspicious regexp patterns.
      # https://go-critic.com/overview.html#badregexp
      - badRegexp
      # Detects bad usage of sort package.
      # https://go-critic.com/overview.html#badsorting
      - badSorting
      # Detects bad usage of sync.OnceFunc.
      # https://go-critic.com/overview.html#badsynconcefunc
      - badSyncOnceFunc
      # Detects bool expressions that can be simplified.
      # https://go-critic.com/overview.html#boolexprsimplify
      - boolExprSimplify
      # Detects when predeclared identifiers are shadowed in assignments.
      # https://go-critic.com/overview.html#builtinshadow
      - builtinShadow
      # Detects top-level declarations that shadow the predeclared identifiers.
      # https://go-critic.com/overview.html#builtinshadowdecl
      - builtinShadowDecl
      # Detects capitalized names for local variables.
      # https://go-critic.com/overview.html#captlocal
      - captLocal
      # Detects erroneous case order inside switch statements.
      # https://go-critic.com/overview.html#caseorder
      - caseOrder
      # Detects malformed 'code generated' file comments.
      # https://go-critic.com/overview.html#codegencomment
      - codegenComment
      # Detects comments with non-idiomatic formatting.
      # https://go-critic.com/overview.html#commentformatting
      - commentFormatting
      # Detects commented-out code inside function bodies.
      # https://go-critic.com/overview.html#commentedoutcode
      - commentedOutCode
      # Detects commented-out imports.
      # https://go-critic.com/overview.html#commentedoutimport
      - commentedOutImport
      # Detects when default case in switch isn't on 1st or last position.
      # https://go-critic.com/overview.html#defaultcaseorder
      - defaultCaseOrder
      # Detects loops inside functions that use defer.
      # https://go-critic.com/overview.html#deferinloop
      - deferInLoop
      # Detects deferred function literals that can be simplified.
      # https://go-critic.com/overview.html#deferunlambda
      - deferUnlambda
      # Detects malformed 'deprecated' doc-comments.
      # https://go-critic.com/overview.html#deprecatedcomment
      - deprecatedComment
      # Detects comments that silence go lint complaints about doc-comment.
      # https://go-critic.com/overview.html#docstub
      - docStub
      # Detects suspicious duplicated arguments.
      # https://go-critic.com/overview.html#duparg
      - dupArg
      # Detects duplicated branch bodies inside conditional statements.
      # https://go-critic.com/overview.html#dupbranchbody
      - dupBranchBody
      # Detects duplicated case clauses inside switch or select statements.
      # https://go-critic.com/overview.html#dupcase
      - dupCase
      # Detects multiple imports of the same package under different aliases.
      # https://go-critic.com/overview.html#dupimport
      - dupImport
      # Detects suspicious duplicated sub-expressions.
      # https://go-critic.com/overview.html#dupsubexpr
      - dupSubExpr
      # Detects suspicious formatting strings usage.
      # https://go-critic.com/overview.html#dynamicfmtstring
      - dynamicFmtString
      # Detects else with nested if statement that can be replaced with else-if.
      # https://go-critic.com/overview.html#elseif
      - elseif
      # Detects suspicious empty declarations blocks.
      # https://go-critic.com/overview.html#emptydecl
      - emptyDecl
      # Detects fallthrough that can be avoided by using multi case values.
      # https://go-critic.com/overview.html#emptyfallthrough
      - emptyFallthrough
      # Detects empty string checks that can be written more idiomatically.
      # https://go-critic.com/overview.html#emptystringtest
      - emptyStringTest
      # Detects unoptimal strings/bytes case-insensitive comparison.
      # https://go-critic.com/overview.html#equalfold
      - equalFold
      # Detects unwanted dependencies on the evaluation order.
      # https://go-critic.com/overview.html#evalorder
      - evalOrder
      # Detects calls to exit/fatal inside functions that use defer.
      # https://go-critic.com/overview.html#exitafterdefer
      - exitAfterDefer
      # Detects exposed methods from sync.Mutex and sync.RWMutex.
      # https://go-critic.com/overview.html#exposedsyncmutex
      - exposedSyncMutex
      # Detects suspicious reassignment of error from another package.
      # https://go-critic.com/overview.html#externalerrorreassign
      - externalErrorReassign
      # Detects problems in filepath.Join() function calls.
      # https://go-critic.com/overview.html#filepathjoin
      - filepathJoin
      # Detects immediate dereferencing of `flag` package pointers.
      # https://go-critic.com/overview.html#flagderef
      - flagDeref
      # Detects suspicious flag names.
      # https://go-critic.com/overview.html#flagname
      - flagName
      # Detects hex literals that have mixed case letter digits.
      # https://go-critic.com/overview.html#hexliteral
      - hexLiteral
      # Detects nil usages in http.NewRequest calls, suggesting http.NoBody as an alternative.
      # https://go-critic.com/overview.html#httpnobody
      - httpNoBody
      # Detects params that incur excessive amount of copying.
      # https://go-critic.com/overview.html#hugeparam
      - hugeParam
      # Detects repeated if-else statements and suggests to replace them with switch statement.
      # https://go-critic.com/overview.html#ifelsechain
      - ifElseChain
      # Detects when imported package names shadowed in the assignments.
      # https://go-critic.com/overview.html#importshadow
      - importShadow
      # Detects strings.Index calls that may cause unwanted allocs.
      # https://go-critic.com/overview.html#indexalloc
      - indexAlloc
      # Detects non-assignment statements inside if/switch init clause.
      # https://go-critic.com/overview.html#initclause
      - initClause
      # Detects suspicious map literal keys.
      # https://go-critic.com/overview.html#mapkey
      - mapKey
      # Detects method expression call that can be replaced with a method call.
      # https://go-critic.com/overview.html#methodexprcall
      - methodExprCall
      # Finds where nesting level could be reduced.
      # https://go-critic.com/overview.html#nestingreduce
      - nestingReduce
      # Detects immediate dereferencing of `new` expressions.
      # https://go-critic.com/overview.html#newderef
      - newDeref
      # Detects return statements those results evaluate to nil.
      # https://go-critic.com/overview.html#nilvalreturn
      - nilValReturn
      # Detects old-style octal literals.
      # https://go-critic.com/overview.html#octalliteral
      - octalLiteral
      # Detects various off-by-one kind of errors.
      # https://go-critic.com/overview.html#offby1
      - offBy1
      # Detects if function parameters could be combined by type and suggest the way to do it.
      # https://go-critic.com/overview.html#paramtypecombine
      - paramTypeCombine
      # Detects expressions like []rune(s)[0] that may cause unwanted rune slice allocation.
      # https://go-critic.com/overview.html#preferdecoderune
      - preferDecodeRune
      # Detects concatenation with os.PathSeparator which can be replaced with filepath.Join.
      # https://go-critic.com/overview.html#preferfilepathjoin
      - preferFilepathJoin
      # Detects fmt.Sprint(f/ln) calls which can be replaced with fmt.Fprint(f/ln).
      # https://go-critic.com/overview.html#preferfprint
      - preferFprint
      # Detects w.Write or io.WriteString calls which can be replaced with w.WriteString.
      # https://go-critic.com/overview.html#preferstringwriter
      - preferStringWriter
      # Detects WriteRune calls with rune literal argument that is single byte and reports to use WriteByte instead.
      # https://go-critic.com/overview.html#preferwritebyte
      - preferWriteByte
      # Detects input and output parameters that have a type of pointer to referential type.
      # https://go-critic.com/overview.html#ptrtorefparam
      - ptrToRefParam
      # Detects append all its data while range it.
      # https://go-critic.com/overview.html#rangeappendall
      - rangeAppendAll
      # Detects expensive copies of `for` loop range expressions.
      # https://go-critic.com/overview.html#rangeexprcopy
      - rangeExprCopy
      # Detects loops that copy big objects during each iteration.
      # https://go-critic.com/overview.html#rangevalcopy
      - rangeValCopy
      # Detects redundant fmt.Sprint calls.
      # https://go-critic.com/overview.html#redundantsprint
      - redundantSprint
      # Detects `regexp.Compile*` that can be replaced with `regexp.MustCompile*`.
      # https://go-critic.com/overview.html#regexpmust
      - regexpMust
      # Detects suspicious regexp patterns.
      # https://go-critic.com/overview.html#regexppattern
      - regexpPattern
      # Detects regexp patterns that can be simplified.
      # https://go-critic.com/overview.html#regexpsimplify
      - regexpSimplify
      # Detects suspicious http.Error call without following return.
      # https://go-critic.com/overview.html#returnafterhttperror
      - returnAfterHttpError
      # Runs user-defined rules using ruleguard linter.
      # https://go-critic.com/overview.html#ruleguard
      - ruleguard
      # Detects switch statements that could be better written as if statement.
      # https://go-critic.com/overview.html#singlecaseswitch
      - singleCaseSwitch
      # Detects slice clear loops, suggests an idiom that is recognized by the Go compiler.
      # https://go-critic.com/overview.html#sliceclear
      - sliceClear
      # Detects usage of `len` when result is obvious or doesn't make sense.
      # https://go-critic.com/overview.html#sloppylen
      - sloppyLen
      # Detects suspicious/confusing re-assignments.
      # https://go-critic.com/overview.html#sloppyreassign
      - sloppyReassign
      # Detects redundant type assertions.
      # https://go-critic.com/overview.html#sloppytypeassert
      - sloppyTypeAssert
      # Detects suspicious sort.Slice calls.
      # https://go-critic.com/overview.html#sortslice
      - sortSlice
      # Detects "%s" formatting directives that can be replaced with %q.
      # https://go-critic.com/overview.html#sprintfquotedstring
      - sprintfQuotedString
      # Detects issue in Query() and Exec() calls.
      # https://go-critic.com/overview.html#sqlquery
      - sqlQuery
      # Detects string concat operations that can be simplified.
      # https://go-critic.com/overview.html#stringconcatsimplify
      - stringConcatSimplify
      # Detects redundant conversions between string and []byte.
      # https://go-critic.com/overview.html#stringxbytes
      - stringXbytes
      # Detects strings.Compare usage.
      # https://go-critic.com/overview.html#stringscompare
      - stringsCompare
      # Detects switch-over-bool statements that use explicit `true` tag value.
      # https://go-critic.com/overview.html#switchtrue
      - switchTrue
      # Detects sync.Map load+delete operations that can be replaced with LoadAndDelete.
      # https://go-critic.com/overview.html#syncmaploadanddelete
      - syncMapLoadAndDelete
      # Detects manual conversion to milli- or microseconds.
      # https://go-critic.com/overview.html#timeexprsimplify
      - timeExprSimplify
      # Detects TODO comments without detail/assignee.
      # https://go-critic.com/overview.html#todocommentwithoutdetail
      - todoCommentWithoutDetail
      # Detects function with too many results.
      # https://go-critic.com/overview.html#toomanyresultschecker
      - tooManyResultsChecker
      # Detects potential truncation issues when comparing ints of different sizes.
      # https://go-critic.com/overview.html#truncatecmp
      - truncateCmp
      # Detects repeated type assertions and suggests to replace them with type switch statement.
      # https://go-critic.com/overview.html#typeassertchain
      - typeAssertChain
      # Detects method declarations preceding the type definition itself.
      # https://go-critic.com/overview.html#typedeffirst
      - typeDefFirst
      # Detects type switches that can benefit from type guard clause with variable.
      # https://go-critic.com/overview.html#typeswitchvar
      - typeSwitchVar
      # Detects unneeded parenthesis inside type expressions and suggests to remove them.
      # https://go-critic.com/overview.html#typeunparen
      - typeUnparen
      # Detects unchecked errors in if statements.
      # https://go-critic.com/overview.html#uncheckedinlineerr
      - uncheckedInlineErr
      # Detects dereference expressions that can be omitted.
      # https://go-critic.com/overview.html#underef
      - underef
      # Detects redundant statement labels.
      # https://go-critic.com/overview.html#unlabelstmt
      - unlabelStmt
      # Detects function literals that can be simplified.
      # https://go-critic.com/overview.html#unlambda
      - unlambda
      # Detects unnamed results that may benefit from names.
      # https://go-critic.com/overview.html#unnamedresult
      - unnamedResult
      # Detects unnecessary braced statement blocks.
      # https://go-critic.com/overview.html#unnecessaryblock
      - unnecessaryBlock
      # Detects redundantly deferred calls.
      # https://go-critic.com/overview.html#unnecessarydefer
      - unnecessaryDefer
      # Detects slice expressions that can be simplified to sliced expression itself.
      # https://go-critic.com/overview.html#unslice
      - unslice
      # Detects value swapping code that are not using parallel assignment.
      # https://go-critic.com/overview.html#valswap
      - valSwap
      # Detects conditions that are unsafe due to not being exhaustive.
      # https://go-critic.com/overview.html#weakcond
      - weakCond
      # Ensures that `//nolint` comments include an explanation.
      # https://go-critic.com/overview.html#whynolint
      - whyNoLint
      # Detects function calls that can be replaced with convenience wrappers.
      # https://go-critic.com/overview.html#wrapperfunc
      - wrapperFunc
      # Detects Yoda style expressions and suggests to replace them.
      # https://go-critic.com/overview.html#yodastyleexpr
      - yodaStyleExpr

    # Enable multiple checks by tags in addition to default checks.
    # Run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic` to see all tags and checks.
    # See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # Default: []
    # enabled-tags:
    #   - diagnostic
    #   - style
    #   - performance
    #   - experimental
    #   - opinionated
    # disabled-tags:
    #   - diagnostic
    #   - style
    #   - performance
    #   - experimental
    #   - opinionated


  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 10

  gofmt:
    # Apply the rewrite rules to the source before reformatting.
    # https://pkg.go.dev/cmd/gofmt
    # Default: []
    rewrite-rules:
      - pattern: 'interface{}'
        replacement: 'any'
      - pattern: 'a[b:len(a)]'
        replacement: 'a[b:]'

  gosimple:
    # Sxxxx checks in https://staticcheck.dev/docs/configuration/options/#checks
    # Default: ["*"]
    checks:
      # Use plain channel send or receive instead of single-case select.
      # https://staticcheck.dev/docs/checks/#S1000
      - S1000
      # Replace for loop with call to copy.
      # https://staticcheck.dev/docs/checks/#S1001
      - S1001
      # Omit comparison with boolean constant.
      # https://staticcheck.dev/docs/checks/#S1002
      - S1002
      # Replace call to 'strings.Index' with 'strings.Contains'.
      # https://staticcheck.dev/docs/checks/#S1003
      - S1003
      # Replace call to 'bytes.Compare' with 'bytes.Equal'.
      # https://staticcheck.dev/docs/checks/#S1004
      - S1004
      # Drop unnecessary use of the blank identifier.
      # https://staticcheck.dev/docs/checks/#S1005
      - S1005
      # Use "for { ... }" for infinite loops.
      # https://staticcheck.dev/docs/checks/#S1006
      - S1006
      # Simplify regular expression by using raw string literal.
      # https://staticcheck.dev/docs/checks/#S1007
      - S1007
      # Simplify returning boolean expression.
      # https://staticcheck.dev/docs/checks/#S1008
      - S1008
      # Omit redundant nil check on slices, maps, and channels.
      # https://staticcheck.dev/docs/checks/#S1009
      - S1009
      # Omit default slice index.
      # https://staticcheck.dev/docs/checks/#S1010
      - S1010
      # Use a single 'append' to concatenate two slices.
      # https://staticcheck.dev/docs/checks/#S1011
      - S1011
      # Replace 'time.Now().Sub(x)' with 'time.Since(x)'.
      # https://staticcheck.dev/docs/checks/#S1012
      - S1012
      # Use a type conversion instead of manually copying struct fields.
      # https://staticcheck.dev/docs/checks/#S1016
      - S1016
      # Replace manual trimming with 'strings.TrimPrefix'.
      # https://staticcheck.dev/docs/checks/#S1017
      - S1017
      # Use "copy" for sliding elements.
      # https://staticcheck.dev/docs/checks/#S1018
      - S1018
      # Simplify "make" call by omitting redundant arguments.
      # https://staticcheck.dev/docs/checks/#S1019
      - S1019
      # Omit redundant nil check in type assertion.
      # https://staticcheck.dev/docs/checks/#S1020
      - S1020
      # Merge variable declaration and assignment.
      # https://staticcheck.dev/docs/checks/#S1021
      - S1021
      # Omit redundant control flow.
      # https://staticcheck.dev/docs/checks/#S1023
      - S1023
      # Replace 'x.Sub(time.Now())' with 'time.Until(x)'.
      # https://staticcheck.dev/docs/checks/#S1024
      - S1024
      # Don't use 'fmt.Sprintf("%s", x)' unnecessarily.
      # https://staticcheck.dev/docs/checks/#S1025
      - S1025
      # Simplify error construction with 'fmt.Errorf'.
      # https://staticcheck.dev/docs/checks/#S1028
      - S1028
      # Range over the string directly.
      # https://staticcheck.dev/docs/checks/#S1029
      - S1029
      # Use 'bytes.Buffer.String' or 'bytes.Buffer.Bytes'.
      # https://staticcheck.dev/docs/checks/#S1030
      - S1030
      # Omit redundant nil check around loop.
      # https://staticcheck.dev/docs/checks/#S1031
      - S1031
      # Use 'sort.Ints(x)', 'sort.Float64s(x)', and 'sort.Strings(x)'.
      # https://staticcheck.dev/docs/checks/#S1032
      - S1032
      # Unnecessary guard around call to "delete".
      # https://staticcheck.dev/docs/checks/#S1033
      - S1033
      # Use result of type assertion to simplify cases.
      # https://staticcheck.dev/docs/checks/#S1034
      - S1034
      # Redundant call to 'net/http.CanonicalHeaderKey' in method call on 'net/http.Header'.
      # https://staticcheck.dev/docs/checks/#S1035
      - S1035
      # Unnecessary guard around map access.
      # https://staticcheck.dev/docs/checks/#S1036
      - S1036
      # Elaborate way of sleeping.
      # https://staticcheck.dev/docs/checks/#S1037
      - S1037
      # Unnecessarily complex way of printing formatted string.
      # https://staticcheck.dev/docs/checks/#S1038
      - S1038
      # Unnecessary use of 'fmt.Sprint'.
      # https://staticcheck.dev/docs/checks/#S1039
      - S1039
      # Type assertion to current type.
      # https://staticcheck.dev/docs/checks/#S1040
      - S1040

  govet:
    # Enable analyzers by name.
    # (in addition to default:
    #   appends, asmdecl, assign, atomic, bools, buildtag, cgocall, composites, copylocks, defers, directive, errorsas,
    #   framepointer, httpresponse, ifaceassert, loopclosure, lostcancel, nilfunc, printf, shift, sigchanyzer, slog,
    #   stdmethods, stringintconv, structtag, testinggoroutine, tests, timeformat, unmarshal, unreachable, unsafeptr,
    #   unusedresult
    # ).
    # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers.
    enable:
      # Check for missing values after append.
      - appends
      # Report mismatches between assembly files and Go declarations.
      - asmdecl
      # Check for useless assignments.
      - assign
      # Check for common mistakes using the sync/atomic package.
      - atomic
      # Check for non-64-bits-aligned arguments to sync/atomic functions.
      - atomicalign
      # Check for common mistakes involving boolean operators.
      - bools
      # Check //go:build and // +build directives.
      - buildtag
      # Detect some violations of the cgo pointer passing rules.
      - cgocall
      # Check for unkeyed composite literals.
      - composites
      # Check for locks erroneously passed by value.
      - copylocks
      # Check for calls of reflect.DeepEqual on error values.
      - deepequalerrors
      # Report common mistakes in defer statements.
      - defers
      # Check Go toolchain directives such as //go:debug.
      - directive
      # Report passing non-pointer or non-error values to errors.As.
      - errorsas
      # Find structs that would use less memory if their fields were sorted.
      - fieldalignment
      # Find calls to a particular function.
      - findcall
      # Report assembly that clobbers the frame pointer before saving it.
      - framepointer
      # Check for mistakes using HTTP responses.
      - httpresponse
      # Detect impossible interface-to-interface type assertions.
      - ifaceassert
      # Check references to loop variables from within nested functions.
      - loopclosure
      # Check cancel func returned by context.WithCancel is called.
      - lostcancel
      # Check for useless comparisons between functions and nil.
      - nilfunc
      # Check for redundant or impossible nil comparisons.
      - nilness
      # Check consistency of Printf format strings and arguments.
      - printf
      # Check for comparing reflect.Value values with == or reflect.DeepEqual.
      - reflectvaluecompare
      # Check for possible unintended shadowing of variables.
      - shadow
      # Check for shifts that equal or exceed the width of the integer.
      - shift
      # Check for unbuffered channel of os.Signal.
      - sigchanyzer
      # Check for invalid structured logging calls.
      - slog
      # Check the argument type of sort.Slice.
      - sortslice
      # Check signature of methods of well-known interfaces.
      - stdmethods
      # Check for string(int) conversions.
      - stringintconv
      # Check that struct field tags conform to reflect.StructTag.Get.
      - structtag
      # Report calls to (*testing.T).Fatal from goroutines started by a test.
      - testinggoroutine
      # Check for common mistaken usages of tests and examples.
      - tests
      # Check for calls of (time.Time).Format or time.Parse with 2006-02-01.
      - timeformat
      # Report passing non-pointer or non-interface values to unmarshal.
      - unmarshal
      # Check for unreachable code.
      - unreachable
      # Check for invalid conversions of uintptr to unsafe.Pointer.
      - unsafeptr
      # Check for unused results of calls to some functions.
      - unusedresult
      # Checks for unused writes.
      - unusedwrite

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    # Default is to use a neutral variety of English.
    locale: US
    # Typos to ignore.
    # Should be in lower case.
    # Default: []
    # ignore-words:
    # Extra word corrections.
    # `typo` and `correction` should only contain letters.
    # The words are case-insensitive.
    # Default: []
    # extra-words:
    #   - typo: "iff"
    #     correction: "if"
    #   - typo: "cancelation"
    #     correction: "cancellation"
    # Mode of the analysis:
    # - default: checks all the file content.
    # - restricted: checks only comments.
    # Default: ""
    mode: restricted

issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: https://golangci-lint.run/usage/false-positives/#default-exclusions
  exclude:
    - abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
